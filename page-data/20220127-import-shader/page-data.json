{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/20220127-import-shader/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Blog"}},"markdownRemark":{"id":"3d898268-3a6a-52f6-b301-d41711121395","excerpt":"やりたいこと WebGLをブラウザ上で使用する場合，HTMLのscriptタグ内にGLSLコードを直接書き込むことでシェーダのタスクを指定できる． ただ，この方法ではGLSLコードの管理やエディタ上での編集がやりにくいので，GLSL…","html":"<h2>やりたいこと</h2>\n<p>WebGLをブラウザ上で使用する場合，HTMLのscriptタグ内にGLSLコードを直接書き込むことでシェーダのタスクを指定できる． ただ，この方法ではGLSLコードの管理やエディタ上での編集がやりにくいので，GLSLコード部分を別ファイルにして読み込めるようにしたい． おそらくすぐに思いつくのは以下のような書き方だが，残念ながらこれでは読み込むことはできない．</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>shader.glsl<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>vertex-shader<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>x-shader/x-vertex<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<details>\r\n<summary></summary>\r\nWenn man WebGL auf einem Webbrowser benutzen, kann man GLSL-Code direkt in die HTML Datei schreiben, um die Shader Aufgaben zu definieren.\r\nAber auf diese Weise ist  es schwierig, den GLSL-Code zu verwalten und zu bearbeiten. Daher möchten wir den GLSL-Code in eine separate Datei schreiben und aus der anderen Datai importieren.\r\nEine einfache Idee wäre, den GLSL-Code wie oben gezeigt zu importieren, aber das funktioniert leider nicht.\r\n</details>\n<h2>GLSLコードのインポート</h2>\n<p>そもそも，GLSLコードをHTMLファイルの中で読み込む必要があるかというとそんなことはない．\r\nHTML内にべた書きする方法で行っているのは，GLSLコードを単なるテキストとしてJavaScriptから参照できるようにしているだけだ．\r\nなのでGLSLコードを別ファイルにする場合，そのコードをテキストとして直接JavaScriptから読み込んでしまえばよい．\r\nvertex shaderのコードであれば，以下のようにGLSLコード部分をbackticksで囲んでエクスポートするJavaScriptファイル(vertex-shader.glsl.js)を作る．</p>\n<div class=\"gatsby-highlight\" data-language=\"glsl\"><pre class=\"language-glsl\"><code class=\"language-glsl\">export <span class=\"token keyword\">default</span> `#version <span class=\"token number\">300</span> es\r\n<span class=\"token keyword\">precision</span> <span class=\"token keyword\">mediump</span> <span class=\"token keyword\">float</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token comment\">// Supplied vertex position attribute</span>\r\n<span class=\"token keyword\">in</span> <span class=\"token keyword\">vec3</span> aVertexPosition<span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token comment\">// Set the position in clipspace coordinates</span>\r\n    gl_Position <span class=\"token operator\">=</span> <span class=\"token keyword\">vec4</span><span class=\"token punctuation\">(</span>aVertexPosition<span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>`</code></pre></div>\n<p>これを，別のJavaScriptからインポートして使用すればよい．このときvertexSourceにはGLSLコードがテキストとして入っている．</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> vertexSource <span class=\"token keyword\">from</span> <span class=\"token string\">'./vertex-shader.glsl.js'</span>\r\n\r\nshader <span class=\"token operator\">=</span> gl<span class=\"token punctuation\">.</span><span class=\"token function\">createShader</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token constant\">VERTEX_SHADER</span><span class=\"token punctuation\">)</span>\r\ngl<span class=\"token punctuation\">.</span><span class=\"token function\">shaderSource</span><span class=\"token punctuation\">(</span>shader<span class=\"token punctuation\">,</span> shaderString<span class=\"token punctuation\">)</span></code></pre></div>\n<p>この手法についての詳細は以下のページも参考にしてほしい:\r\n<a href=\"https://stackoverflow.com/questions/14219947/why-do-shaders-have-to-be-in-html-file-for-webgl-program\">https://stackoverflow.com/questions/14219947/why-do-shaders-have-to-be-in-html-file-for-webgl-program</a></p>\n<details>\r\n<summary></summary>\r\nEigentlich muss man den GLSL-Code nicht aus der HTML Datei lesen. \r\nDa der GLSL-Code von JavaScript benötigt wird, wäre es sinnvoll, den GLSL-Code direkt aus der JavaScript Datai zu importieren.\r\nDazu kann man eine JavaScript Datei erstellen, die den GLSL-Code als Text enthält.\r\n</details>","frontmatter":{"title":"GLSLコードをJavaScriptからimportする","date":"January 27, 2022","description":"Importing GLSL shader code from JavaScript","tags":["Programming"]}},"previous":{"fields":{"slug":"/20220125-read-pixels/"},"frontmatter":{"title":"フラグメントシェーダからCPUへのデータ受け渡し"}},"next":{"fields":{"slug":"/20220128-xorshift/"},"frontmatter":{"title":"Xorshiftをざっくり理解する"}}},"pageContext":{"id":"3d898268-3a6a-52f6-b301-d41711121395","previousPostId":"fd053499-ca77-53fc-8526-c99e67f2ff85","nextPostId":"49633bee-4a98-5235-bf11-f988a5bd9d07"}},
    "staticQueryHashes": ["2841359383","3257411868"]}