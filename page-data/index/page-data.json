{
    "componentChunkName": "component---src-pages-index-js",
    "path": "/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Blog"}},"allMarkdownRemark":{"nodes":[{"excerpt":"やりたいこと モンテカルロシミュレーションは，1回1回の実行結果を相互にやり取りする必要が基本的にはないはずなので，計算を並列化すると効率よくシミュレーションを回せそうだ．\r\nWebGL…","fields":{"slug":"/20220310-mrg32k3a/"},"frontmatter":{"date":"March 17, 2022","title":"MRG32k3aを使ってGPU上で乱数を発生させる","description":"Generate random numbers by MRG32k3a on GPU WebGL2 environment"}},{"excerpt":"やりたいこと 輻射による熱のやり取りを評価する場合，レイトレースすることで物体間のRadiative Coupling…","fields":{"slug":"/20220222-uniform-distribution/"},"frontmatter":{"date":"February 22, 2022","title":"いろいろな形状の表面に点を一様分布させる","description":"Uniformly distribute points on primitive geometries"}},{"excerpt":"微小表面から円板へのView Factor 今回は，微小表面から円板へのView Factor例に，View Factorの具体的な計算方法を説明する．\r\n微小表面と円板の形状，および位置関係は以下の図のように，によって表されるものとする． 面積分によるView Factor…","fields":{"slug":"/20220215-disk-viewfactor/"},"frontmatter":{"date":"February 15, 2022","title":"微小表面から円板への形態係数（View Factor）","description":"View factor from a differential surface to a disk"}},{"excerpt":"やりたいこと ES6モジュールをJestテストする方法のメモです． Jestの設定 Jestをインストールする． package.jsonファイル内に”script”と”type”のスクリプトを追加する． jest.config.js…","fields":{"slug":"/20220209-jest/"},"frontmatter":{"date":"February 09, 2022","title":"ES6モジュールをJestテストする","description":"Jest testing environment for ES6 modules without Babel"}},{"excerpt":"光のモデリング レイトレーシングを用いてコンピュータグラフィックを生成する場合，\r\nそれらしく見せることが目的であれば，Phong…","fields":{"slug":"/20220130-reflection/"},"frontmatter":{"date":"January 30, 2022","title":"拡散反射と鏡面反射のモデル化","description":"Modeling of the diffuse and specular reflection"}},{"excerpt":"熱輻射と形態係数（View Factor）の関係 どんな物体も，表面から常に電磁波としてエネルギーを放射している．\r\nある物体Aからエネルギーが放射され別の物体B…","fields":{"slug":"/20220129-viewfactor/"},"frontmatter":{"date":"January 29, 2022","title":"形態係数（View Factor）とは","description":"What is view factor?"}},{"excerpt":"はじめに 擬似乱数を発生させるアルゴリズムとして，線形合同法，Xorshift，メルセンヌ・ツイスタ，などいくつか有名なものがある．\r\nその中でも操作が単純で高速なXorshift…","fields":{"slug":"/20220128-xorshift/"},"frontmatter":{"date":"January 28, 2022","title":"Xorshiftをざっくり理解する","description":"Get an idea of Xorshift"}},{"excerpt":"やりたいこと WebGLをブラウザ上で使用する場合，HTMLのscriptタグ内にGLSLコードを直接書き込むことでシェーダのタスクを指定できる． ただ，この方法ではGLSLコードの管理やエディタ上での編集がやりにくいので，GLSL…","fields":{"slug":"/20220127-import-shader/"},"frontmatter":{"date":"January 27, 2022","title":"GLSLコードをJavaScriptからimportする","description":"Importing GLSL shader code from JavaScript"}},{"excerpt":"やりたいこと WebGLとOpenGL ES Shading Language(GLSL ES)を用いると，ウェブブラウザ上で比較的簡単にグラフィック処理を行うことが出来る．\r\nこの環境でGPGPU(General-purpose computing on graphics…","fields":{"slug":"/20220125-read-pixels/"},"frontmatter":{"date":"January 25, 2022","title":"フラグメントシェーダからCPUへのデータ受け渡し","description":"Transfering data from the fragment shader to CPU by using WebGL readPixels"}},{"excerpt":"Gatsbyのセットアップ 以下のコマンドでグローバルにgatsby-cliをインストールする． これでgatsbyコマンドが使えるはずだが，もしコマンドが認識されないようなら，\r\ngatsby-cli…","fields":{"slug":"/20220124-gatsby-blog/"},"frontmatter":{"date":"January 24, 2022","title":"GatsbyとGitHub Pagesで作るMarkdownブログ","description":"How to setup a Markdown format blog based on Gatsby and GitHub Pages"}}]}},"pageContext":{}},
    "staticQueryHashes": ["2841359383","3257411868"]}