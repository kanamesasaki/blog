{
    "componentChunkName": "component---src-templates-tags-js",
    "path": "/tags/programming/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Blog"}},"allMarkdownRemark":{"totalCount":10,"edges":[{"node":{"excerpt":"人工衛星の軌道を計算した後，緯度・経度・高度に変換したいとき，ざっくりでよければ地球を球体と仮定して適当にarctanとかを使って求めることはできる．ただ，もう少しきちんと求める場合には，地球を回転楕円体として考えるべきで，この場合の変換はそれほど簡単ではない．\r\nECEF…","fields":{"slug":"/20230424-geodetic/"},"frontmatter":{"date":"April 24, 2023","title":"ECEF座標からgeodetic座標への変換","description":"Transformation from ECEF to geodetic coordinates"}}},{"node":{"excerpt":"今回は，TypeScriptでThree.jsを使ったWebアプリを作成してGithub Pagesにデプロイする際の手順についてまとめておきます． プロジェクトのセットアップ まずはプロジェクトをinitsしてTypeScriptをインストール． tsc —init…","fields":{"slug":"/20220516-typescript-setup/"},"frontmatter":{"date":"May 16, 2022","title":"TypeScriptとThree.jsでWebアプリを作ってGithub Pagesにデプロイする","description":"Develop a browser app with TypeScript and Three.js. Then deploy it on Github Pages"}}},{"node":{"excerpt":"やりたいこと いろんなものが入った配列から何番目かの要素を選んで，それが期待した型なら受け取る，という操作を考えよう．\r\n気持ち的にはジェネリクスを使って次のように書きたいのだが，これは上手くいかない．TypeScript…","fields":{"slug":"/20220414-instanceof/"},"frontmatter":{"date":"April 14, 2022","title":"TypeScriptのジェネリクスでinstanceof Tしたい","description":"How to use instanceof with generics in TypeScript"}}},{"node":{"excerpt":"やりたいこと モンテカルロシミュレーションは，1回1回の実行結果を相互にやり取りする必要がないはずなので，計算を並列化すると効率よくシミュレーションを回せそうだ．\r\nWebGL…","fields":{"slug":"/20220310-mrg32k3a/"},"frontmatter":{"date":"March 10, 2022","title":"MRG32k3aを使ってGPU上で乱数を発生させる","description":"Generate random numbers by MRG32k3a on GPU WebGL2 environment"}}},{"node":{"excerpt":"やりたいこと JavaScriptまたはTypeScriptのES6モジュールをJestテストする方法のメモです． Jestの設定（JavaScriptの場合） Jestをインストールする． package.jsonファイル内に”script”と”type…","fields":{"slug":"/20220209-jest/"},"frontmatter":{"date":"February 09, 2022","title":"ES6モジュールをJestテストする","description":"Jest testing environment for JavaScript/TypeScript ES6 modules"}}},{"node":{"excerpt":"はじめに 擬似乱数を発生させるアルゴリズムとして，線形合同法，Xorshift，メルセンヌ・ツイスタ，などいくつか有名なものがある．\r\nその中でも操作が単純で高速なXorshift…","fields":{"slug":"/20220128-xorshift/"},"frontmatter":{"date":"January 28, 2022","title":"Xorshiftをざっくり理解する","description":"Get an idea of Xorshift"}}},{"node":{"excerpt":"やりたいこと WebGLをブラウザ上で使用する場合，HTMLのscriptタグ内にGLSLコードを直接書き込むことでシェーダのタスクを指定できる． ただ，この方法ではGLSLコードの管理やエディタ上での編集がやりにくいので，GLSL…","fields":{"slug":"/20220127-import-shader/"},"frontmatter":{"date":"January 27, 2022","title":"GLSLコードをJavaScriptからimportする","description":"Importing GLSL shader code from JavaScript"}}},{"node":{"excerpt":"やりたいこと WebGLとOpenGL ES Shading Language(GLSL ES)を用いると，ウェブブラウザ上で比較的簡単にグラフィック処理を行うことが出来る．\r\nこの環境でGPGPU(General-purpose computing on graphics…","fields":{"slug":"/20220125-read-pixels/"},"frontmatter":{"date":"January 25, 2022","title":"フラグメントシェーダからCPUへのデータ受け渡し","description":"Transfering data from the fragment shader to CPU by using WebGL readPixels"}}},{"node":{"excerpt":"Gatsbyのセットアップ 以下のコマンドでグローバルにgatsby-cliをインストールする． これでgatsbyコマンドが使えるはずだが，もしコマンドが認識されないようなら，\r\ngatsby-cli…","fields":{"slug":"/20220124-gatsby-blog/"},"frontmatter":{"date":"January 24, 2022","title":"GatsbyとGitHub Pagesで作るMarkdownブログ","description":"How to setup a Markdown format blog based on Gatsby and GitHub Pages"}}},{"node":{"excerpt":"ルンゲクッタ法の更新式 一般に，(1)の時間発展を計算したい場合，手軽に使用できるのが古典的なルンゲクッタ法だ． これを用いると，を時間ステップ幅として次のように計算を進めることができる． ルンゲクッタ法の利点は，…","fields":{"slug":"/20191120-runge-kutta/"},"frontmatter":{"date":"November 20, 2019","title":"ルンゲクッタ法の精度確認","description":"Accuracy of the Runge-Kutta method"}}}]}},"pageContext":{"tag":"Programming"}},
    "staticQueryHashes": []}