{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/20200321-python-opentd/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Blog"}},"markdownRemark":{"id":"91ce3c3e-afd5-580e-96ba-741316793e80","excerpt":"OpenTD Thermal Desktop Version 6.1にはOpenTDと呼ばれる，Thermal Desktopを操作するためのAPIが含まれている．Version 6.0でTD APIとして初めて導入された機能で， Version 6.…","html":"<h2>OpenTD</h2>\n<p>Thermal Desktop Version 6.1にはOpenTDと呼ばれる，Thermal Desktopを操作するためのAPIが含まれている．Version 6.0でTD APIとして初めて導入された機能で， Version 6.1へのアップデートに伴って，大幅な機能の拡張と名前の変更が行われたようだ． 通常Thermal Desktopは，AutoCADに組み込まれたGUIを用いて，ポチポチクリックしながら熱モデルの作成や解析を行うが，OpenTDを用いると，これらのマニュアル作業をスクリプトで書き表すことができる．以下のような点で非常に便利な機能だ．</p>\n<ul>\n<li>形状，材料，熱環境など様々なパラメタに関して，パラメトリックな解析を簡単に行うことができる</li>\n<li>モデルの作成手順がそのままスクリプト化されるので，モデル作成の情報がすべて残る</li>\n<li>スクリプトの一部あるいは全部を，将来的に再利用をすることが（うまくやれば）容易</li>\n<li>Thermal Desktopから直接データを受け取って，グラフ等にプロットすることができる</li>\n</ul>\n<p>OpenTDは.NETを用いるので，基本的にはC#での利用が推奨されている．ただ，個人的には最近Pythonしか使っていないので，できればThermal Desktopの操作，Thermal Desktopから渡されたデータの解析・プロットまでを，Python環境で全てできるようにしてしまいたい．そこで今回は，PythonからOpenTD・Thermal Desktopを操作するために必要な環境の，セットアップ方法について解説する．</p>\n<h2>仮想環境の構築</h2>\n<p>バージョン互換などの問題が生じないように，Thermal Desktopを操作するための仮想環境を立てて，その中に必要なパッケージをインストールしよう．まずはAnacondaのターミナルを開いて，以下のコマンドを打つと現在存在する環境の一覧が確認できる．もし，何も追加で作成されていなければbase環境のみが存在するはずだ．</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">)</span> C:<span class=\"token punctuation\">\\</span><span class=\"token operator\">></span>conda info --envs\r\n<span class=\"token comment\"># conda environments:</span>\r\n<span class=\"token comment\">#</span>\r\nbase                  *  C:<span class=\"token punctuation\">\\</span>ProgramData<span class=\"token punctuation\">\\</span>Anaconda3</code></pre></div>\n<p>通常，仮想環境を作成するとユーザーフォルダに.conda\\envsと.conda\\pkgsが作成されて，ここに環境設定ファイルやパッケージが展開されるのだが，諸事情によりユーザーフォルダ以下を重たくしたくないので，インストールディレクトリをC:\\conda\\の下に変更する．これには，ユーザーフォルダにある，.condarcファイルに以下のテキストを書き込めばよい．</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">envs_dirs:\r\n  - C:<span class=\"token punctuation\">\\</span>conda<span class=\"token punctuation\">\\</span>envs\r\n\r\npkgs_dirs:\r\n  - C:<span class=\"token punctuation\">\\</span>conda<span class=\"token punctuation\">\\</span>pkgs</code></pre></div>\n<p>これを行った上で，Anacondaのターミナルで以下のコマンドを打って，ディレクトリの指定・優先順位設定がされていることを確認しよう．</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">)</span> C:<span class=\"token punctuation\">\\</span><span class=\"token operator\">></span>conda config --show envs_dirs\r\nenvs_dirs:\r\n  - C:<span class=\"token punctuation\">\\</span>conda<span class=\"token punctuation\">\\</span>envs\r\n  - C:<span class=\"token punctuation\">\\</span>Users<span class=\"token punctuation\">\\</span>XXXXXX<span class=\"token punctuation\">\\</span>.conda<span class=\"token punctuation\">\\</span>envs\r\n  - C:<span class=\"token punctuation\">\\</span>ProgramData<span class=\"token punctuation\">\\</span>Anaconda3<span class=\"token punctuation\">\\</span>envs\r\n  - C:<span class=\"token punctuation\">\\</span>Users<span class=\"token punctuation\">\\</span>XXXXXX<span class=\"token punctuation\">\\</span>AppData<span class=\"token punctuation\">\\</span>Local<span class=\"token punctuation\">\\</span>conda<span class=\"token punctuation\">\\</span>conda<span class=\"token punctuation\">\\</span>envs\r\n\r\n<span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">)</span> C:<span class=\"token punctuation\">\\</span><span class=\"token operator\">></span>conda config --show pkgs_dirs\r\npkgs_dirs:\r\n  - C:<span class=\"token punctuation\">\\</span>conda<span class=\"token punctuation\">\\</span>pkgs</code></pre></div>\n<p>ここまで確認出来たら，以下のコマンドを打って仮想環境を作成しよう．このコマンドではtdという名前の仮想環境を作成して，そこにPython 3.7をインストールしている．インストールを行った時点でPython 3.8が利用可能だが，後でインストールするPython for .NET (pythonnet)のために，Python 3.7を指定している．</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">)</span> C:<span class=\"token punctuation\">\\</span><span class=\"token operator\">></span>conda create -n td <span class=\"token assign-left variable\">python</span><span class=\"token operator\">=</span><span class=\"token number\">3.7</span></code></pre></div>\n<p>これで，仮想環境ができているはずなので，以下のコマンドを打ってtd環境に入ろう・</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">)</span> C:<span class=\"token punctuation\">\\</span><span class=\"token operator\">></span>conda activate td</code></pre></div>\n<h2>パッケージのインストール</h2>\n<p>ここから，td環境に各種パッケージをインストールしていく．OpenTDを使用するために必要なのはPython for .NET (pythonnet)だけではあるのだが，その他にも最低限必要そうなパッケージはインストールしておく．</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token punctuation\">(</span>td<span class=\"token punctuation\">)</span> C:<span class=\"token punctuation\">\\</span><span class=\"token operator\">></span>conda <span class=\"token function\">install</span> -c conda-forge pythonnet\r\n<span class=\"token punctuation\">(</span>td<span class=\"token punctuation\">)</span> C:<span class=\"token punctuation\">\\</span><span class=\"token operator\">></span>conda <span class=\"token function\">install</span> numpy\r\n<span class=\"token punctuation\">(</span>td<span class=\"token punctuation\">)</span> C:<span class=\"token punctuation\">\\</span><span class=\"token operator\">></span>conda <span class=\"token function\">install</span> scipy\r\n<span class=\"token punctuation\">(</span>td<span class=\"token punctuation\">)</span> C:<span class=\"token punctuation\">\\</span><span class=\"token operator\">></span>conda <span class=\"token function\">install</span> pandas\r\n<span class=\"token punctuation\">(</span>td<span class=\"token punctuation\">)</span> C:<span class=\"token punctuation\">\\</span><span class=\"token operator\">></span>conda <span class=\"token function\">install</span> matplotlib\r\n<span class=\"token punctuation\">(</span>td<span class=\"token punctuation\">)</span> C:<span class=\"token punctuation\">\\</span><span class=\"token operator\">></span>conda <span class=\"token function\">install</span> jupyterlab</code></pre></div>\n<p>注意点として，pythonnetはインストールの際にきちんとチャネルを指定して，バージョンを確認しよう．今回はpythonnet 2.4をインストールしているが，このバージョンとpythonnet 2.3では動作が異なる（自分の確認している限りでは，場合によってデータ型がC#のgeneric listからpython listに変わっていたりする）．以下のページでインストールコマンドやソフトウェアバージョンが確認できる．</p>\n<ul>\n<li><a href=\"https://anaconda.org/conda-forge/pythonnet\">https://anaconda.org/conda-forge/pythonnet</a></li>\n<li><a href=\"https://pypi.org/project/pythonnet/\">https://pypi.org/project/pythonnet/</a></li>\n</ul>\n<p>以下のコマンドでtd環境を終了し，現在存在する環境のリストを再度確認することができる．</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token punctuation\">(</span>td<span class=\"token punctuation\">)</span> C:<span class=\"token punctuation\">\\</span><span class=\"token operator\">></span>conda deactivate\r\n\r\n<span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">)</span> C:<span class=\"token punctuation\">\\</span><span class=\"token operator\">></span>conda info --envs\r\n<span class=\"token comment\"># conda environments:</span>\r\n<span class=\"token comment\">#</span>\r\nbase                  *  C:<span class=\"token punctuation\">\\</span>ProgramData<span class=\"token punctuation\">\\</span>Anaconda3\r\ntd                       C:<span class=\"token punctuation\">\\</span>conda<span class=\"token punctuation\">\\</span>envs<span class=\"token punctuation\">\\</span>td</code></pre></div>","frontmatter":{"title":"PythonからOpenTD・Thermal Desktopを操作する環境構築","date":"March 21, 2020","description":"How to setup Python Environment for Controling OpenTD / Thermal Desktop","tags":["Thermal"]}},"previous":{"fields":{"slug":"/20200315-japanese-ime/"},"frontmatter":{"title":"Windows 10に日本語IMEをインストールする際のエラー対処法"}},"next":{"fields":{"slug":"/20200417-wave-function/"},"frontmatter":{"title":"[量子力学] 波動関数と物理量の演算子"}}},"pageContext":{"id":"91ce3c3e-afd5-580e-96ba-741316793e80","previousPostId":"aeffeb60-d325-5701-a912-bcb1c152bb4e","nextPostId":"3f1cc30a-74c6-54f5-a490-5979582aa007"}},
    "staticQueryHashes": ["2841359383","3257411868"]}