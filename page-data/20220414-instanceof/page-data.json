{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/20220414-instanceof/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Blog"}},"markdownRemark":{"id":"bc1c6240-b5de-5636-9179-964827d0323e","excerpt":"やりたいこと いろんなものが入った配列から何番目かの要素を選んで，それが期待した型なら受け取る，という操作を考えよう．\r\n気持ち的にはジェネリクスを使って次のように書きたいのだが，これは上手くいかない．TypeScriptがコンパイルされると，ジェネリクスの記述はなくなってしまうので，ランタイムの型チェックでT…","html":"<h2>やりたいこと</h2>\n<p>いろんなものが入った配列から何番目かの要素を選んで，それが期待した型なら受け取る，という操作を考えよう．\r\n気持ち的にはジェネリクスを使って次のように書きたいのだが，これは上手くいかない．TypeScriptがコンパイルされると，ジェネリクスの記述はなくなってしまうので，ランタイムの型チェックでTと表すことはできないようだ．</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">get</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>id<span class=\"token operator\">:</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> arr<span class=\"token operator\">:</span><span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token constant\">T</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">const</span> m <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span>\r\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\"><span class=\"token constant\">T</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">return</span> m\r\n    <span class=\"token punctuation\">}</span>\r\n    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">throw</span> <span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'unexpected type'</span><span class=\"token punctuation\">)</span>\r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>コンストラクト関数</h2>\n<p>解決方法としては，以下のようにコンストラクタ関数を書く，という方法がある．</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">get</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>id<span class=\"token operator\">:</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> arr<span class=\"token operator\">:</span><span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> cls<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token constant\">T</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">const</span> m <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span>\r\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">cls</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">return</span> m\r\n    <span class=\"token punctuation\">}</span>\r\n    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">throw</span> <span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'unexpected type'</span><span class=\"token punctuation\">)</span>\r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>慣れていないと少し分かりにくい記述なので，分解して考えてみよう．\r\n<code class=\"language-text\">(...args: any) => T</code>の部分は任意の個数だけany引数をとってTを返すような関数を表している．\r\nこの部分の頭についている<code class=\"language-text\">new</code>はconstruct signatureと呼ばれ，この関数がコンストラクタ関数として使えることを表している．\r\nつまり<code class=\"language-text\">cls</code>は，何かしらの引数をとってTを返すようなコンストラクタ関数になっており，<code class=\"language-text\">instanceof</code>を使うことで配列<code class=\"language-text\">arr</code>から取り出した<code class=\"language-text\">m</code>がコンストラクタ関数<code class=\"language-text\">cls</code>のインスタンスになっているかどうかをランタイムにチェックできる．</p>\n<p>使用例としては以下のような感じになる．</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span> <span class=\"token punctuation\">{</span>\r\n    id<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>id<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> id<span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Bar</span> <span class=\"token punctuation\">{</span>\r\n    name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Bar</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bar'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\r\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">,</span> Foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>","frontmatter":{"title":"TypeScriptのジェネリクスでinstanceof Tしたい","date":"April 14, 2022","description":"How to use instanceof with generics in TypeScript","tags":["Programming"]}},"previous":{"fields":{"slug":"/20220310-mrg32k3a/"},"frontmatter":{"title":"MRG32k3aを使ってGPU上で乱数を発生させる"}},"next":{"fields":{"slug":"/20220516-typescript-setup/"},"frontmatter":{"title":"TypeScriptとThree.jsでWebアプリを作ってGithub Pagesにデプロイする"}}},"pageContext":{"id":"bc1c6240-b5de-5636-9179-964827d0323e","previousPostId":"30ad6e91-6de9-5722-8787-717a44a19ac1","nextPostId":"40463e8a-73bf-5318-8e35-b72ddf414399"}},
    "staticQueryHashes": ["2841359383","3257411868"]}