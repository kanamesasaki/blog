{"version":3,"file":"component---src-templates-tags-js-7345893cdc29bca3fa90.js","mappings":"uJAmCA,IAhCe,SAAC,GAAmC,IAG7CA,EAHYC,EAAgC,EAAhCA,SAAUC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SAE3BC,EADcC,WACDJ,EAASK,SAiB5B,OAbEN,EADEI,EAEA,sBAAIG,UAAU,gBACZ,gBAAC,EAAAC,KAAD,CAAMC,GAAG,KAAKP,IAKhB,gBAAC,EAAAM,KAAD,CAAMD,UAAU,mBAAmBE,GAAG,KACnCP,GAML,uBAAKK,UAAU,iBAAiB,oBAAmBH,GACjD,0BAAQG,UAAU,iBAAiBP,GACnC,4BAAOG,GACP,oCACK,IAAIO,MAAOC,cADhB,mBAGE,qBAAGC,KAAK,4BAAR,c,8DCiDR,UAxEa,SAAC,GAAqC,IAAD,EAAlCC,EAAkC,EAAlCA,YAAaC,EAAqB,EAArBA,KAAMb,EAAe,EAAfA,SAC3Bc,GAAY,UAAAD,EAAKE,KAAKC,oBAAV,eAAwBf,QAAxB,QACVgB,EAAQL,EAARK,IACR,EAA8BJ,EAAKK,kBAA3BC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,WACTC,EAAeD,EAAN,SACE,IAAfA,EAAmB,GAAK,KADX,iBAEEH,EAFF,IAIf,OACE,gBAAC,IAAD,CAAQjB,SAAUA,EAAUC,MAAOa,GACjC,sBAAIQ,MAAO,CAAEC,UAAU,SACvB,0BAAKF,GACL,0BACGF,EAAMK,KAAI,YAAe,IAAZC,EAAW,EAAXA,KACJC,EAASD,EAAKE,OAAdD,KACR,OACE,2BACIpB,UAAU,iBACVsB,WAAS,EACTC,SAAS,6BAEb,8BACE,0BACE,gBAAC,EAAAtB,KAAD,CAAMC,GAAIkB,EAAMI,SAAS,OACvB,wBAAMA,SAAS,YAAYL,EAAKM,YAAY9B,SAGhD,6BAAQwB,EAAKM,YAAYC,OAE3B,+BACE,qBACEC,wBAAyB,CACvBC,OAAQT,EAAKM,YAAYI,aAAeV,EAAKW,SAE/CN,SAAS,sBAWnB,gBAAC,EAAAvB,KAAD,CAAMC,GAAG,SAAT","sources":["webpack://gatsby-starter-blog/./src/components/layout.js","webpack://gatsby-starter-blog/./src/templates/tags.js"],"sourcesContent":["import * as React from \"react\"\r\nimport { Link } from \"gatsby\"\r\n\r\nconst Layout = ({ location, title, children }) => {\r\n  const rootPath = `${__PATH_PREFIX__}/`\r\n  const isRootPath = location.pathname === rootPath\r\n  let header\r\n\r\n  if (isRootPath) {\r\n    header = (\r\n      <h1 className=\"main-heading\">\r\n        <Link to=\"/\">{title}</Link>\r\n      </h1>\r\n    )\r\n  } else {\r\n    header = (\r\n      <Link className=\"header-link-home\" to=\"/\">\r\n        {title}\r\n      </Link>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className=\"global-wrapper\" data-is-root-path={isRootPath}>\r\n      <header className=\"global-header\">{header}</header>\r\n      <main>{children}</main>\r\n      <footer>\r\n        Â© {new Date().getFullYear()}, Built with\r\n        {` `}\r\n        <a href=\"https://www.gatsbyjs.com\">Gatsby</a>\r\n      </footer>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Layout\r\n","import React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport Layout from \"../components/layout\"\r\n// Components\r\nimport { Link, graphql } from \"gatsby\"\r\n\r\nconst Tags = ({ pageContext, data, location }) => {\r\n  const siteTitle = data.site.siteMetadata?.title || `Title`\r\n  const { tag } = pageContext\r\n  const { edges, totalCount } = data.allMarkdownRemark\r\n  const tagHeader = `${totalCount} post${\r\n    totalCount === 1 ? \"\" : \"s\"\r\n  } tagged with \"${tag}\"`\r\n\r\n  return (\r\n    <Layout location={location} title={siteTitle}>\r\n      <ol style={{ listStyle: `none` }}>\r\n      <h3>{tagHeader}</h3>\r\n      <ul>\r\n        {edges.map(({ node }) => {\r\n          const { slug } = node.fields\r\n          return (\r\n            <article\r\n                className=\"post-list-item\"\r\n                itemScope\r\n                itemType=\"http://schema.org/Article\"\r\n            >\r\n            <header>\r\n              <h2>\r\n                <Link to={slug} itemProp=\"url\">\r\n                  <span itemProp=\"headline\">{node.frontmatter.title}</span>\r\n                </Link>\r\n              </h2>\r\n              <small>{node.frontmatter.date}</small>\r\n            </header>\r\n            <section>\r\n              <p\r\n                dangerouslySetInnerHTML={{\r\n                  __html: node.frontmatter.description || node.excerpt,\r\n                }}\r\n                itemProp=\"description\"\r\n              />\r\n            </section>\r\n            </article>\r\n          )\r\n        })}\r\n      </ul>\r\n      {/*\r\n              This links to a page that does not yet exist.\r\n              You'll come back to it!\r\n      */}\r\n      <Link to=\"/tags\">All tags</Link>\r\n      </ol>\r\n    </Layout>\r\n  )\r\n}\r\nTags.propTypes = {\r\n  pageContext: PropTypes.shape({\r\n    tag: PropTypes.string.isRequired,\r\n  }),\r\n  data: PropTypes.shape({\r\n    allMarkdownRemark: PropTypes.shape({\r\n      totalCount: PropTypes.number.isRequired,\r\n      edges: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n          node: PropTypes.shape({\r\n            frontmatter: PropTypes.shape({\r\n              title: PropTypes.string.isRequired,\r\n            }),\r\n            fields: PropTypes.shape({\r\n              slug: PropTypes.string.isRequired,\r\n            }),\r\n          }),\r\n        }).isRequired\r\n      ),\r\n    }),\r\n  }),\r\n}\r\nexport default Tags\r\n\r\nexport const pageQuery = graphql`\r\n  query($tag: String) {\r\n    site {\r\n      siteMetadata {\r\n        title\r\n      }\r\n    }\r\n    allMarkdownRemark(\r\n      limit: 2000\r\n      sort: { fields: [frontmatter___date], order: DESC }\r\n      filter: { frontmatter: { tags: { in: [$tag] } } }\r\n    ) {\r\n      totalCount\r\n      edges {\r\n        node {\r\n          excerpt\r\n          fields {\r\n            slug\r\n          }\r\n          frontmatter {\r\n            date(formatString: \"MMMM DD, YYYY\")\r\n            title\r\n            description\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`"],"names":["header","location","title","children","isRootPath","__PATH_PREFIX__","pathname","className","Link","to","Date","getFullYear","href","pageContext","data","siteTitle","site","siteMetadata","tag","allMarkdownRemark","edges","totalCount","tagHeader","style","listStyle","map","node","slug","fields","itemScope","itemType","itemProp","frontmatter","date","dangerouslySetInnerHTML","__html","description","excerpt"],"sourceRoot":""}